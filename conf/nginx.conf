user  www www;

worker_processes 2;


daemon off;#just for supervisor
error_log  /data/sites/logs/nginx_error.log  crit;

pid        /usr/local/nginx/logs/nginx.pid;

#Specifies the value for maximum file descriptors that can be opened by this process.
worker_rlimit_nofile 65535;

events
	{
		use epoll;
		worker_connections 65535;
	}

http
	{
		include       mime.types;
		default_type  application/octet-stream;

		server_names_hash_bucket_size 128;
		client_header_buffer_size 32k;
		large_client_header_buffers 4 32k;
		client_max_body_size 10m;

		sendfile on;
		tcp_nopush     on;

		keepalive_timeout 65;
		expires 5m;

		tcp_nodelay on;

		fastcgi_connect_timeout 900;
		fastcgi_send_timeout 900;
		fastcgi_read_timeout 900;
		fastcgi_buffers 2 256k;
		fastcgi_buffer_size 128k;
		fastcgi_busy_buffers_size 256k;
		fastcgi_temp_file_write_size 256k;

		gzip on;
		gzip_min_length 1k;
		gzip_buffers 4 16k;
		#gzip_http_version 1.0;
		gzip_comp_level 5;
		gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
		gzip_vary on;
		gzip_disable "MSIE [1-6]\.";

		#limit_zone  crawler  $binary_remote_addr  10m;

		#log format
		log_format  access  '$remote_addr - $remote_user [$time_local] "$request" '
             '$status $body_bytes_sent "$http_referer" '
             '"$http_user_agent" $http_x_forwarded_for';

        upstream frontends_by_downos {
	        ip_hash;
	        server 127.0.0.1:8000;
	        server 127.0.0.1:8001;
        }

        upstream frontends_by_community {
        	ip_hash;
	        server 127.0.0.1:8800;
	        server 127.0.0.1:8801;
	        server 127.0.0.1:8802;
	        server 127.0.0.1:8803;
        }

        upstream frontends_by_shareos{
	        server 127.0.0.1:9998;
	        server 127.0.0.1:9999;
        }

		upstream backend {
	        server 127.0.0.1:8800 weight=10;
	        #server 292.168.1.3:8080  weight=4;
		}

	    #定义一个名为allips的limit_req_zone用来存储session，大小是10M内存，
	    #以$binary_remote_addr 为key,限制平均每秒的请求为20个，
	    #1M能存储16000个状态，rete的值必须为整数，
	    #如果限制两秒钟一个请求，可以设置成30r/m

	    limit_req_zone $binary_remote_addr zone=allips:10m rate=20r/s;

	    #定义一个名为one的limit_zone,大小10M内存来存储session
	    #以$binary_remote_addr 为key
	    #nginx 1.18以后用limit_conn_zone替换了limit_conn
	    #且只能放在http作用域
	    #limit_conn_zone   one  $binary_remote_addr  10m;

		#载入禁止访问的IP列表
		include blockips.conf;

server
	{
		listen       80;
		server_name .lihuaer.com;
		index index.html index.htm index.php;
		root  /data/sites/lihuaer.com/archives;

  		location / {
             proxy_pass http://localhost:8888;
        }

        #location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|zip|tgz|gz|rar|bz2|pdf|tx|tar|wav|bmp|rtf|js|flv|swf|html|htm)$
        #{
        #     expires 30d;
        #}

        #location ~* ^.+\.(css|js)$
        #{
        #     expires      12h;
        #}

        location ~ ^/static/(css|js|ico|img|themes|root|upload)/ {
                    root    /data/sites/lihuaer.com;
                    if ($query_string){
                    expires max;
                    }
        }

		access_log  /data/sites/logs/lihuaer-com-access.log  access;
	}

server
    {
        listen          80;
        server_name .lihuashu.com;
        access_log /data/gopath/src/mzr/logs/mzr_nginx_access.log access;

        gzip on;

        if ($host != 'www.lihuashu.com' ) {
            rewrite ^/(.*)$ http://www.lihuashu.com/$1 permanent;
        }

        location /view {
            proxy_pass              http://backend$request_uri;
            proxy_redirect          off;
            proxy_set_header        X-Real-IP       $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        location /(signin|signout|signup) {
            proxy_redirect          off;
            proxy_set_header Host $host;
            proxy_set_header        X-Real-IP       $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass              http://backend;
        }
        
        location / {
            #限制每ip每秒不超过20个请求，漏桶数burst为5
            #brust的意思就是，如果第1秒、2,3,4秒请求为19个，
            #第5秒的请求为25个是被允许的。
            #但是如果你第1秒就25个请求，第2秒超过20的请求返回503错误。
            #nodelay，如果不设置该选项，严格使用平均速率限制请求数，
            #第1秒25个请求时，5个请求放到第2秒执行，
            #设置nodelay，25个请求将在第1秒执行。

            limit_req zone=allips burst=5 nodelay;


            #连接数限制
	        #limit_conn one 20;
	        #带宽限制,对单个连接限数，如果一个ip两个连接，就是500x2k
	        #limit_rate 500k;            

            root   /var/www/cache;  
            proxy_store on;  
            proxy_set_header Accept-Encoding '';  
            proxy_temp_path /var/www/tmp;  
			expires 30d;
            
            if ( !-f $request_filename ) {  
                proxy_pass http://backend$request_uri;  
            }  
            
            rewrite ^/$ /default.html last;
            rewrite "(*UTF8)^/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/$" /_$1_.html last;
            rewrite "(*UTF8)^/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/$" /$1/_$2_.html last;
            rewrite "(*UTF8)^/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/$" /$1/$2/_$3_.html last;
            rewrite "(*UTF8)^/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/$" /$1/$2/$3/_$4_.html last;
            rewrite "(*UTF8)^/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/$" /$1/$2/$3/$4/_$5_.html last;
            rewrite "(*UTF8)^/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/$" /$1/$2/$3/$4/$5/_$6_.html last;
            rewrite "(*UTF8)^/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/$" /$1/$2/$3/$4/$5/$6/_$7_.html last;
            rewrite "(*UTF8)^/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/$" /$1/$2/$3/$4/$5/$6/$7/_$8_.html last;
            rewrite "(*UTF8)^/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/$" /$1/$2/$3/$4/$5/$6/$7/$8/_$9_.html last;
            rewrite "(*UTF8)^/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/([\x{4e00}-\x{9fbf}A-Z0-9a-z_-]+)/$" /$1/$2/$3/$4/$5/$6/$7/$8/$9/_$10_.html last;


            if ( !-f $request_filename ) {  
                proxy_pass http://backend$request_uri;  
            }  
        }


    }

#include @.lihuashu.com.conf;
#include www.lihuashu.com.conf;
#include share.lihuashu.com.conf;
#include space.lihuashu.com.conf;

#include sql.lihuashu.com.conf;

#include download.lihuashu.com.conf;
}

