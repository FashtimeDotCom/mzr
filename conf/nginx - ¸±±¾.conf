#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        /var/run/nginx.pid;

#Specifies the value for maximum file descriptors that can be opened by this process.
worker_rlimit_nofile 65535;
events
    {
        use epoll;
        worker_connections 65535;
    }


http {
    include       mime.types;
    default_type  application/octet-stream;


    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

	#log format
	log_format  access  '$remote_addr - $remote_user [$time_local] "$request" '
            '$status $body_bytes_sent "$http_referer" '
            '"$http_user_agent" $http_x_forwarded_for';
    #access_log  logs/access.log  main;

	sendfile on;
	tcp_nopush     on;
	keepalive_timeout  65;
	tcp_nodelay on;

	fastcgi_connect_timeout 300;
	fastcgi_send_timeout 300;
	fastcgi_read_timeout 300;
	fastcgi_buffer_size 64k;
	fastcgi_buffers 4 64k;
	fastcgi_busy_buffers_size 128k;
	fastcgi_temp_file_write_size 128k;

    server_names_hash_bucket_size 128;     #指定服务器名称哈希表的框大小
    client_header_buffer_size 32k;         
    large_client_header_buffers 4 128k;     #以上两个是设定客户端请求的Header头缓冲区大小，对于cookie内容较大的请求，应增大改值。（400或414错误）
    client_max_body_size 8m;                #允许客户端请求的最大单文件字节数
    client_body_buffer_size 32k;            #缓冲区代理缓冲用户端请求的最大字节数，可以理解为保存到本地再传给用户
 
	##cache start##
	proxy_headers_hash_bucket_size 1024;
	proxy_headers_hash_max_size 512;
    proxy_connect_timeout 600;              #nginx跟后端服务器连接超时时间(代理连接超时)
    proxy_read_timeout    600;              #连接成功后，后端服务器响应时间(代理接收超时)
    proxy_send_timeout    600;              #后端服务器数据回传时间(代理发送超时)
    proxy_buffer_size     64k;              #设置代理服务器（nginx）保存用户头信息的缓冲区大小
    proxy_buffers         4 64k;            #proxy_buffers缓冲区，网页平均在64k以下的话，这样设置
    proxy_busy_buffers_size  128k;           #高负荷下缓冲大小（proxy_buffers*2）
    proxy_temp_file_write_size  1024m;      #设定缓存文件夹大小，大于这个值，将从upstream服务器传递请求，而不缓冲到磁盘
    proxy_ignore_client_abort on;           #不允许代理端主动关闭连接

    #注：proxy_temp_path和proxy_cache_path指定的路径必须在同一分区
    proxy_temp_path   /var/tmp/proxy_temp;
    #设置Web缓存区名称为cache_one，内存缓存空间大小为200MB，1天没有被访问的内容自动清除，硬盘缓存空间大小为30GB。
    proxy_cache_path  /var/tmp/proxy_cache levels=1:2 keys_zone=cache_one:100m inactive=1d max_size=10g;
	##cache end##

 	server_tokens off;

	gzip  on;
    gzip_min_length  1k;
	gzip_http_version 1.1;
	gzip_vary on;
	gzip_comp_level 6;
	gzip_proxied any;
	gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_buffers     4 16k;
	gzip_disable "MSIE [1-6].(?!.*SV1)";

	upstream veryhourserver { 
	        server 110.76.39.205:8888;
	}

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

    server {
		listen 80;
		server_name ctw.gowalker.org;

		location / {
			proxy_pass http://localhost:8085/;
		}
    }

    server {
		listen 80;
		server_name www.gowalker.org gowalker.org;

		location / {
			proxy_pass http://localhost:8080/;
		}
    }

    server {
		listen 80;
		server_name beta.gowalker.org;

		location / {
			proxy_pass http://localhost:8081/;
		}
    }

    server {
		listen 80;
		server_name test.beego.me beego.me;

		location / {
			proxy_pass http://localhost:8090/;
		}
    }
    
    server {
		listen 80;
		server_name bbs1.beego.me;

		location / {
			proxy_pass http://localhost:8092/;
		}
    }

    server {
		listen 80;
		server_name www.godaily.org godaily.org;

		location / {
			proxy_pass http://localhost:8888/;
		}
    }	

    server {
		listen 80;
		server_name www.gotalks.io gotalks.io;

		location / {
			proxy_pass http://localhost:8082/;
		}
    }

    server {
		listen 80;
		server_name www.gpmgo.com api.gpmgo.com doc.gpmgo.com gpmgo.com;

		location / {
			proxy_pass http://localhost:8000/;
		}
    }

    server{ 
		listen 80;   
		server_name .veryhour.com;  
		rewrite  ^/(.*) http://www.veryhour.com/$1 last;   
    }
	server {
        	listen   80;
	        server_name www.veryhour.com;

	        location / {
		        proxy_next_upstream http_502 http_504 error timeout invalid_header;

		        #proxy_cache cache_one;
		        proxy_cache_valid 200 304 12h;
		        proxy_cache_valid 301 302 1m;
		        proxy_cache_valid any 1m;
		        proxy_cache_key $host$uri$is_args$args;

		        proxy_set_header  Host $host;
		        proxy_set_header  X-Real-IP  $remote_addr;
		        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
		        proxy_set_header X-Forwarded-For $remote_addr;
		        proxy_set_header Accept-Encoding "";

	            proxy_pass http://veryhourserver;
	            
		        if ($query_string){
                    expires max;
                }
	        }

	        access_log /usr/local/nginx/logs/www.veryhour.com.log;
	}


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

    include /usr/local/nginx/vhosts/*;
}
